
/* border-radius */

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}


/* Placeholder */

@mixin placeholder {
  ::-webkit-input-placeholder    {@content}
  :-moz-placeholder              {@content}
  ::-moz-placeholder             {@content}
  :-ms-input-placeholder         {@content}
}

/* Box Sizing */

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}



/* box-shadow */

@mixin box-shadow($box-shadow) {
  -webkit-box-shadow: $box-shadow;
     -moz-box-shadow: $box-shadow;
          box-shadow: $box-shadow;
}



/* breakpoints */

@mixin breakpoint($point) {
  @if $point == xxxxlarge {
    @media (max-width: 1600px) { @content; } /* 1600 px*/
  }
  @if $point == xxxlarge {
    @media (max-width: 1400px) { @content; } /* 1400 px*/
  }
  @if $point == xxlarge {
    @media (max-width: 1280px) { @content; } /* 1280 px*/
  }
  @if $point == xlarge {
    @media (max-width: 1199px) { @content; } /* 1199 px*/
  }
  @if $point == large {
    @media (max-width: 1024px) { @content; } /* 1024 px*/
  }
  @else if $point == medium {
    @media (max-width: 991px) { @content; } /* 991 px*/
  }
  @else if $point == small {
    @media (max-width: 767px)  { @content; } /* 767 px*/
  }
  @else if $point == x-small {
    @media (max-width: 480px)  { @content; } /* 480 px*/
  }
}


/* Retina */

@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {                             
            background-image: url($image);                /* on retina, use image that's scaled by 2 */
            background-size: $width $height;        /*@include image-2x("url", 100px, 25px);*/         
          }
}


@mixin print {
  @media print {
    @content;
  }
}


/* transition */

@mixin transition($transition...) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}
@mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}
@mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function:    $timing;
    -o-transition-timing-function:      $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
}


/* ===== transformation ===== */

@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms !important;
}

/* rotate */
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

/* scale */
@mixin scale($scale) {
   @include transform(scale($scale));
} 

/* translate */
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}

/* skew */
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}

/* transform origin */
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}

/* ===== transformation Ends ===== */
